{\rtf1\ansi\ansicpg1250\cocoartf2761
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs24 \cf0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 CREATE VIEW OrdersView AS\
SELECT\
	OrderID,\
	Quantity,\
	TotalCost\
FROM\
	Orders\
WHERE\
	Quantity > 2;\
\
SELECT* FROM ordersview;\
\
SELECT\
	Orders.CustomerID,\
	CustomerDetails.CustomerName,\
	Orders.OrderID,\
	Menu.MenuName,\
	MenuItems.Courses\
FROM\
	Orders\
	JOIN CustomerDetails ON Orders.CustomerID = CustomerDetails.CustomerID\
	JOIN Menu ON Orders.MenuID = Menu.MenuID\
	JOIN MenuItems ON Menu.MenuItemID = MenuItems.MenuItemID\
WHERE\
	Orders.TotalCost > 150;\
\
SELECT\
	MenuName\
FROM\
	Menu\
WHERE\
	MenuID = ANY (\
		SELECT\
			MenuID\
		FROM\
			Orders\
		WHERE\
			Quantity > 2);\
\
\
CREATE PROCEDURE GetMaxQuantity ()\
SELECT\
	MAX(Quantity) AS 'Max Order Quantity'\
	FROM\
		Orders;\
\
CALL GetMaxQuantity ();\
\
PREPARE GetOrderDetail FROM 'SELECT OrderID, Quantity, TotalCost FROM Orders WHERE CustomerID = ?';\
SET @customer = 5;\
\
EXECUTE GetOrderDetail USING @customer;\
\
DELIMITER //\
CREATE PROCEDURE CancelOrder (in id INT)\
BEGIN\
	DELETE FROM Orders WHERE OrderID = 3;\
	SELECT CONCAT('Order ',id, ' is cancel');\
END//\
DELIMITER ;\
\
BEGIN;\
CALL CancelOrder (3);\
SELECT * FROM Orders;\
ROLLBACK;\
\
INSERT INTO Bookings (Date,\
	TableNumber)\
VALUES\
	('2024-09-01', 4),\
	('2024-08-02', 3),\
	('2024-07-24', 10),\
	('2024-08-22',17);\
\
SELECT\
	*\
FROM\
	Bookings\
ORDER BY BookingID DESC;\
\
DROP PROCEDURE IF EXISTS  CheckBooking;\
DELIMITER $$\
CREATE PROCEDURE CheckBooking (IN dat DATE, IN tab INT)\
BEGIN\
	SELECT\
		CASE WHEN COUNT(BookingID) > 0 THEN\
			CONCAT('Tables ', tab, 'is booked')\
			ELSE\
				CONCAT('Table ', tab, ' is free')\
		END AS 'Booking status'\
	FROM\
		Bookings\
	WHERE\
		Date = dat AND TableNumber = tab;\
END $$ \
DELIMITER ;\
\
CALL CheckBooking('2022-01-03', 5);\
\
\
DELIMITER $$ \
DROP PROCEDURE IF EXISTS AddValidBooking;\
CREATE PROCEDURE AddValidBooking (IN dat DATE, IN tab INT)\
BEGIN\
DECLARE\
	numbers_of_reservations INT;\
	SELECT\
		COUNT(BookingID) INTO numbers_of_reservations\
	FROM\
		Bookings\
	WHERE\
		Date = dat\
		AND TableNumber = tab;\
	START TRANSACTION;\
	INSERT INTO Bookings (Date, TableNumber)\
		VALUES(dat, tab);\
	IF numbers_of_reservations > 0 \
		THEN ROLLBACK;\
		SELECT 'Insert is cancel';\
	ELSE \
		COMMIT;\
		SELECT 'Reservation is add';\
	END IF;\
END $$ \
DELIMITER ;\
\
CALL AddValidBooking('2020-06-21', 56);\
\
DELIMITER //\
CREATE PROCEDURE AddBooking (IN dat DATE,IN tab INT)\
BEGIN\
	INSERT INTO Bookings (Date, TableNumber)\
	VALUES(dat, tab);\
SELECT 'Row been add';\
END //\
DELIMITER ;\
\
DELIMITER // \
CREATE PROCEDURE UpdateBooking (IN id INT, IN dat INT)\
BEGIN\
	UPDATE\
		Bookings SET\
			Date = dat\
		WHERE\
			BookingID = id;\
	SELECT\
		'Row been updated';\
END // \
DELIMITER ;\
\
DELIMITER // \
CREATE PROCEDURE CancelBooking (IN id INT)\
BEGIN\
	DELETE FROM Bookings\
		WHERE\
			BookingID = id;\
	SELECT\
		'Row been deleted';\
END // \
DELIMITER ;\
\
\
}